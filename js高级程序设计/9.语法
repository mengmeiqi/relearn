语法

1.ECMAScript的语法大量借鉴了C及其他类C语言（如 JAVA 和 Perl）的语法。

2.区分大小写
ECMASceipt中的一切（变量、函数名和操作符）都区分大小写。

3.标识符
指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则组合起来的一或多个字符。
第一个字符必须是一个字母、下划线(_)或一个美元符号($)
其他字符可以是字母、下划线、美元符号或数字。

不能把关键字、保留字、true、false和null用作标识符。

4.注释

5.严格模式（strict mode）
(1)ECMAScript5引入了严格模式的概念。
(2)严格模式是为JavaScript定义了一种不同的解析与执行模型。
(3)在严格模式下，ECMAScript3中的一些不确定的行为将得到处理，而且对某些不安全的操作也回抛出错误。
(4)在这个脚本中启用严格模式，可以在顶部添加如下代码：
"use strict"
在函数内部的商法包含这条编译指示，也可以指定函数在严格模式下执行：
function doSomething() {
  "use strict"
  // 函数体
}
(5)"use strict" 这行代码看起来像是字符串，而且也没有赋值给任何变量。
但其实它是一个编译指示（pragma）。
用于告诉支持的JavaScript引擎切换到严格模式。
这是为不破坏ECMAScript3语法而特意选定的语法。

6.语句
(1)ECMAScript中的语句以一个分号结尾。如果省略分号，则由解析器确定语句的结尾。
(2)加上分号可以避免很多错误(例如 不完整的输入)
(3)开发人员可以放心的通过删除多余的空格来压缩ECMAScript代码(代码行结尾处没有分号回导致压缩错误)
(4)加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了

7.关键字和保留字
(1)ECMA-262描述了一组具有特定用途的关键字。
这些关键字可用于表示控制语句的开始或结束，或者用于执行特定操作等。
按照规则，关键字也是语言保留的，不能用作标识符。
以下就是ECMAScript的全部关键字(带*号上标的是第5版新增的关键字)
break do instanceof typeof
case  else  new  var
catch  finally  return  void
continue  for  switch  while
debugger*  function  this  with
default  if  throw
delete  in  try
(2)ECMA-262还描述了另外一组不能用作标识符的保留字。
尽管保留字在这门语言中还没有任何特定的用途，但它们有可能在将来被用作关键字。
以下是ECMA-262第3版定义的全部保留字：
abstract  enum  int  short
boolean  export  interface  static
byte  extends  long  super
char  final  native  synchronized
class  float  package  throws
const  goto  private  transient
debugger  implements  protected  volatile
double  import  public
(3)第5版把非严格模式下运行时的关键字缩减为下列这些
class  enum  extends  super
const  export  import
(4)在严格模式下，第5版还对以下保留字施加了限制：
implements  package  public
interface  private  static
let  protected  yield

在实现ECMAScript 3 的JavaScript引擎中使用关键字作标识符，会导致"Identiifier Expected" 错误。
从而使用保留子作标识符可能会也可能不会导致相同的错误，具体取决于特定的引擎。

第5版对使用关键字和保留子的规则进行了少许修改。
关键字和保留字虽然仍然不能作为标识符使用，但现在可以用作对象的属性名。
(最好不要用作标识符和属性名)

除了上面列出的保留字和关键字，ECMA-262第5版对eval和arguments还施加了限制。
在严格模式下，这两个名字也不能作为标识符和属性名，否则会抛出错误。